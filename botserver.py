import sys, os, subprocess, requests, time, socket, threading

# Token do bot e URL base
TOKEN = '7610954512:AAFX1g8OZQ7vsOWg7R4fQoh7_OPhQmft4NU'
strURL = f'https://api.telegram.org/bot{TOKEN}'
ultimo_update_id = 0  

# Configura√ß√£o do servidor
HOST = '192.168.1.20'
PORT_BOT = 5001              # Porta para comunica√ß√£o com o bot
PORT_CLIENTE = 5002          # Porta para comunica√ß√£o com os clientes (agentes)
PORT_COMUNICACAO_BOT = 5003  # Porta separada para comunica√ß√£o do bot com o servidor

# Cada entrada ter√° os dados: host, ip, usu√°rio, tempo_online e o socket do cliente.
clientes_conectados = {}

# Define o caminho correto para o arquivo de bloqueio
if os.name == 'nt':  # Windows
    LOCK_DIR = 'C:\\temp'
    LOCK_FILE = os.path.join(LOCK_DIR, 'server.lock')
else:  # Linux
    LOCK_DIR = '/tmp'
    LOCK_FILE = os.path.join(LOCK_DIR, 'server.lock')

def verificar_instancia():
    """Impede que mais de uma inst√¢ncia do cliente seja executada."""
    try:
        if not os.path.exists(LOCK_DIR):
            os.makedirs(LOCK_DIR)
        if os.path.exists(LOCK_FILE):
            print("‚ö†Ô∏è O servidor j√° est√° em execu√ß√£o!")
            sys.exit()
        with open(LOCK_FILE, 'w') as f:
            f.write(str(os.getpid()))
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo de bloqueio: {e}")
        sys.exit()

def remover_arquivo_bloqueio():
    """Remove o arquivo de bloqueio e encerra o programa corretamente."""
    print("\n‚èπÔ∏è Servidor encerrado pelo usu√°rio.")
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
    sys.exit()

def obter_mensagens():
    global ultimo_update_id
    parametros = {'timeout': 5, 'offset': ultimo_update_id}
    getRequisicao = requests.get(strURL + '/getUpdates', params=parametros)

    if getRequisicao.status_code != 200:
        sys.exit('\nERRO : Erro na requisi√ß√£o...\n')

    return getRequisicao.json()

def enviar_resposta(chat_id, mensagem):
    dictDados = {'chat_id': chat_id, 'text': mensagem}
    requests.post(strURL + '/sendMessage', data=dictDados)

def processar_comandos():
    global ultimo_update_id
    while True:
        jsonRetorno = obter_mensagens()
        
        if jsonRetorno['result']:
            for update in jsonRetorno['result']:
                if 'message' in update:
                    mensagem = update['message']
                    chat_id = mensagem['chat']['id']
                    texto = mensagem.get('text', '')

                    print(f"üì® Mensagem recebida: {texto}")

                    if texto == '/start':
                        resposta = ("ü§ñ Bem-vindo ao AgenteHardware! \n\n"
                                    "Sou um sistema cliente-servidor desenvolvido em Python. Minha fun√ß√£o √© gerenciar m√∫ltiplos clientes que me enviam informa√ß√µes sobre hardware, usu√°rios e hist√≥rico do sistema.\n\n"
                                    "Para ver os comandos dispon√≠veis, digite /help. Caso j√° saiba o comando desejado, basta envi√°-lo e estarei pronto para responder!")
                    elif texto == '/help':
                        resposta = ("üì≤ Comandos dispon√≠veis:\n\n"
                                    "‚Ä¢ /listar_agentes - Lista todos os agentes online, mostrando IP, nome do host, usu√°rio logado e tempo de conex√£o.\n"
                                    "‚Ä¢ /info_hardware - Solicita informa√ß√µes de hardware dos agentes (CPU, mem√≥ria, disco, SO).\n"
                                    "‚Ä¢ /programas_instalados - Retorna a lista de programas instalados nos dispositivos (Windows e Linux).\n"
                                    "‚Ä¢ /historico_navegacao - Obt√©m o hist√≥rico de navega√ß√£o dos principais navegadores (Chrome, Firefox, Edge, Opera, Safari).\n"
                                    "‚Ä¢ /info_usuario - Mostra informa√ß√µes detalhadas do usu√°rio logado (UID, grupos, diret√≥rio home, shell padr√£o, etc.).\n"
                                    "‚Ä¢ /encerrar - Encerra a comunica√ß√£o com o bot.")
                    elif texto == '/encerrar':
                        resposta = "At√© logo! Voc√™ pode enviar uma mensagem a qualquer momento que estarei pronto para ajudar."
                    elif texto.startswith(('/listar_agentes', '/info_hardware', '/programas_instalados', '/historico_navegacao', '/info_usuario')):
                        resposta = enviar_para_servidor(texto)
                    else:
                        resposta = "‚ùì Comando n√£o reconhecido. Tente /start ou /help."
                    
                    enviar_resposta(chat_id, resposta)
                    ultimo_update_id = update['update_id'] + 1
        
        time.sleep(0.5)  # Evita sobrecarga na API do Telegram

def enviar_para_servidor(comando):
    """ O bot envia um comando para o servidor na porta de comunica√ß√£o e aguarda a resposta. """
    try:
        cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        cliente.connect((HOST, PORT_COMUNICACAO_BOT))
        cliente.send(comando.encode())
        resposta = cliente.recv(4096).decode()
        cliente.close()
        return resposta
    except Exception as e:
        return f"‚ùå Erro na conex√£o com o servidor: {e}"

def remover_cliente(endereco):
    """ Remove um cliente da lista de clientes conectados. """
    if endereco in clientes_conectados:
        del clientes_conectados[endereco]
        print(f"üîå Cliente {endereco} desconectado e removido da lista.")

def lidar_com_cliente(cliente_socket, endereco_cliente):
    """Lida com um cliente conectado: recebe seus dados iniciais e armazena o socket para comunica√ß√£o futura."""
    try:
        print(f"üñ•Ô∏è Cliente conectado: {endereco_cliente}")
        dados_recebidos = cliente_socket.recv(1024).decode()
        host, ip, usuario = dados_recebidos.split(',')
        clientes_conectados[endereco_cliente] = {
            "host": host,
            "ip": ip,
            "usuario": usuario,
            "tempo_online": time.time(),
            "socket": cliente_socket
        }
        print(f"üì• Cliente registrado: {host} ({ip}) - Usu√°rio: {usuario}")

        # Loop de heartbeat para monitorar a conex√£o sem consumir dados.
        while True:
            time.sleep(1)
            try:
                # Define um timeout curto para o heartbeat.
                cliente_socket.settimeout(20)
                # O uso de MSG_PEEK permite verificar se h√° dados sem remov√™-los do buffer.
                data = cliente_socket.recv(1, socket.MSG_PEEK)
                if not data:
                    print(f"Cliente {endereco_cliente} desconectado (MSG_PEEK retornou vazio).")
                    break
            except socket.timeout:
                # Se ocorrer timeout, n√£o h√° dados prontos, mas a conex√£o provavelmente est√° ativa.
                continue
            except Exception as e:
                print(f"Erro ao verificar conex√£o do cliente {endereco_cliente}: {e}")
                break

    except Exception as e:
        print(f"‚ùå Erro com o cliente {endereco_cliente}: {e}")
    finally:
        remover_cliente(endereco_cliente)
        cliente_socket.close()

def aceitar_conexoes_clientes():
    """ Aceita m√∫ltiplas conex√µes de clientes (agentes). """
    servidor_cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    servidor_cliente.bind((HOST, PORT_CLIENTE))
    servidor_cliente.listen(5)
    print(f"üñ•Ô∏è Servidor (Clientes) iniciado em {HOST}:{PORT_CLIENTE}")

    while True:
        cliente_socket, endereco_cliente = servidor_cliente.accept()
        threading.Thread(target=lidar_com_cliente, args=(cliente_socket, endereco_cliente)).start()

def aceitar_conexoes_bot():
    """
    Aceita conex√µes do bot para receber comandos.
    - Se o comando for /listar_agentes, utiliza os dados armazenados.
    - Se for um dos outros comandos (/info_hardware, /programas_instalados, /historico_navegacao, /info_usuario),
      o servidor repassa o comando a cada cliente e agrega as respostas.
    """
    servidor_comunicacao_bot = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    servidor_comunicacao_bot.bind((HOST, PORT_COMUNICACAO_BOT))
    servidor_comunicacao_bot.listen(1)
    print(f"ü§ñ Servidor (Comunicacao Bot) iniciado em {HOST}:{PORT_COMUNICACAO_BOT}")

    while True:
        bot_socket, endereco_bot = servidor_comunicacao_bot.accept()
        print(f"‚úÖ Bot conectado para comunica√ß√£o: {endereco_bot}")

        try:
            comando = bot_socket.recv(1024).decode().strip()
            print(f"üì® Comando recebido do bot: {comando}")

            if comando == '/listar_agentes':
                if clientes_conectados:
                    resposta = "\n".join([
                        f"üîπ {dados['host']} ({dados['ip']}) - Usu√°rio: {dados['usuario']} - Online h√° {divmod(int(time.time() - dados['tempo_online']), 60)[0]}m{divmod(int(time.time() - dados['tempo_online']), 60)[1]}s"
                        for dados in clientes_conectados.values()
                    ])
                else:
                    resposta = "Nenhum agente conectado."
                bot_socket.send(resposta.encode())
                print("‚úÖ Resposta enviada para o bot com sucesso!")

            elif comando in ['/info_hardware', '/programas_instalados', '/historico_navegacao', '/info_usuario']:
                respostas = []
                for endereco, dados in clientes_conectados.items():
                    client_socket = dados.get("socket")
                    if client_socket:
                        try:
                            client_socket.send(comando.encode())
                            resposta_cliente = client_socket.recv(4096).decode()
                            respostas.append(f"üîπ {dados['host']} ({dados['ip']}):\n{resposta_cliente}")
                        except Exception as e:
                            respostas.append(f"üîπ {dados['host']} ({dados['ip']}): Erro ao obter resposta ({e})")
                resposta = "\n\n".join(respostas) if respostas else "Nenhum agente dispon√≠vel para responder."
                bot_socket.send(resposta.encode())

            else:
                resposta = "Comando n√£o reconhecido."
                bot_socket.send(resposta.encode())
        
        except Exception as e:
            print(f"‚ùå Erro na comunica√ß√£o com o bot: {e}")
        finally:
            bot_socket.close()
            print("üîå Conex√£o com bot encerrada.")

def main():
    threading.Thread(target=aceitar_conexoes_clientes, daemon=True).start()
    threading.Thread(target=aceitar_conexoes_bot, daemon=True).start()
    threading.Thread(target=processar_comandos, daemon=True).start()
    print("üîÑ Servidor rodando... Pressione Ctrl+C para encerrar.")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        remover_arquivo_bloqueio()

if __name__ == "__main__":
    verificar_instancia()
    main()